# include < iostream >
# include < string >
# include < fstream >
# include " lexer.h "


int KeywordChk ( std :: string src )
{
    if ( src == "main" )
    {
        return 1 ;
    }
    else if ( src == "int" )
    {
        return 1 ;
    }
    else if ( src == "return" )
    {
        return 1 ;
    }
    else if ( src == "auto" )
    {
        return 1 ;
    }
    else 
    {
        return 0 ;
    }
}

int ConstantChk ( std :: string src )
{
    for ( int i = 0 ; i < src . size ( ) ; i ++ )
    {
        if (  ! ( 48 <=  src [ i ] && src [ i ]  <= 59 ) )
        {
            return 0 ;
        }
    }
    return 1 ;
}

int OperatorChk ( std :: string src )
{
    if ( src == ";" )
    {
        return 1 ;
    }
    else if ( src == "{" )
    {
        return 1 ;
    }
    else if ( src == "}" )
    {
        return 1;
    }
    else if ( src == "(" )
    {
        return 1 ;
    }
    else if ( src == ")" )
    {
        return 1 ;
    }
    else if ( src == "<" )
    {
        return 1 ;
    }
    else if ( src == ">" )
    {
        return 1 ;
    }
    else
    {
        return 0 ;
    }
}

int Lexer (const char * path )
{
    std :: ifstream fin ;
    fin . open ( path , std :: ios :: in ) ;
    if ( ! fin )
    {
        return 1 ;
    }
    else
    {
        std :: string read ;
        while ( fin )
        {
            fin >> read ;
            if ( KeywordChk ( read ) == 1 )
            {
                rlang :: Token T ( read , "Keyword" ) ;
                T . Log ( ) ;
            }
            else if ( OperatorChk ( read ) ==  1 )
            {
                rlang :: Token T ( read , "Operator" ) ;
                T . Log ( ) ;
            }
            else if ( ConstantChk ( read ) == 1 )
            {
                rlang :: Token T ( read , "Constant" ) ;
                T . Log() ;
            }
            else if( read [ 0 ] == '""' && read [ read . size ( ) - 1 ] == '"' )
            {
                rlang :: Token T ( read , "String" ) ;
                T . Log ( ) ;
            }
            else
            {
                rlang : :Token T ( read , "Identifier" ) ;
                T . Log ( ) ;
            }
           
        }
    }
    fin . close ( ) ;
    return  0 ;
}


int main ( int argc , char * argv [ ] )
{
   
        if ( Lexer ( "test2.txt" ) == 0 )
        {

        }
        else
        {
            std :: cout << "Error Opening Source File" ;
        }
        std :: cin . get ( ) ;

    return 0 ;
}

